--Comm
    |-- main.cpp
    |-- main.h
    |-- comm.cbp
    |-- CMakeLists.txt
--CommApp
    |-- main.cpp
    |-- commApp.cbp
    |-- CMakeLists.txt

the comm project generates dll file 
the commApp takes links this dll file and generates exe file
how to do this in CMakeLists

To link the DLL file generated by the "Comm" project and generate an executable file for the "CommApp" project using CMakeLists.txt, you can use the following configuration:

In the "Comm" directory, create a CMakeLists.txt file with the following content:

```cmake
# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.12)

# Set the project name
project(Comm VERSION 1.0)

# Add the library target
add_library(Comm SHARED
    main.cpp
    main.h
    comm.cbp
)

# Specify the DLL output directory
set_target_properties(Comm PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/dll"
)

# Instruct CMake to install the DLL file
install(TARGETS Comm
    LIBRARY DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/dll"
)
```

In the "CommApp" directory, create a CMakeLists.txt file with the following content:

```cmake
# Set the minimum required version of CMake
cmake_minimum_required(VERSION 3.12)

# Set the project name
project(CommApp VERSION 1.0)

# Add the executable target
add_executable(CommApp
    main.cpp
    commApp.cbp
)

# Add the include directories for the Comm project
target_include_directories(CommApp PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/../Comm")

# Link the Comm library
target_link_libraries(CommApp PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/../Comm/dll/Comm.dll")
```

With this setup, you can build the projects using CMake. The "Comm" project will generate a DLL file, and the "CommApp" project will link this DLL file and generate an executable file.

Please note that you may need to modify the paths or adjust the CMakeLists.txt files based on your specific project structure or requirements.



bakup//
# # Specify the DLL output directory
# set_target_properties(TFCMcomm PROPERTIES
#     LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/dll"
# )

# # Instruct CMake to install the DLL file
# install(TARGETS TFCMcomm
#     LIBRARY DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/dll"
# )

# # List of source files
# set(SRC_FILES
#         main.cpp
#         )

# # Compile the object file
# add_library(TFCMcomm_obj OBJECT ${SRC_FILES})
# target_compile_options(TFCMcomm_obj PRIVATE -Wall -O2)
# target_compile_definitions(TFCMcomm_obj PRIVATE BUILD_DLL)

# # Create the shared library
# add_library(TFCMcomm SHARED $<TARGET_OBJECTS:TFCMcomm_obj>)

# # Set additional linker flags
# target_link_options(TFCMcomm PRIVATE -s)


///backup of ConsoleApp
# # Add the directory containing the custom DLL
# link_directories("D:/Amit/Programs/""C Programs""/TFCMcomm/Out/")
        
# # # Link against the custom DLL
# target_link_libraries(${EXECUTABLE} PRIVATE TFCMcomm)

# # Link the necessary flags for Windows
# if (WIN32)
#     target_link_options(${EXECUTABLE} PRIVATE
#         -Wl,--out-implib=${CMAKE_CURRENT_SOURCE_DIR}/../Out/libTFCMcomm.dll.a
#         # -Wl,--output-def=${CMAKE_CURRENT_SOURCE_DIR}/bin/Release/libTFCMcomm.def
#         # -Wl,--out-implib=${CMAKE_CURRENT_SOURCE_DIR}/bin/Release/libTFCMcomm.dll.a
#         # -Wl,--dll
#     )
# endif()



///////////tfcm backup Tfcmcomm

# cmake_minimum_required(VERSION 3.15.3)

# # Optional: print out extra messages to see what is going on. Comment it to have less verbose messages
# set(CMAKE_VERBOSE_MAKEFILE ON)

# # Path to toolchain file. This one has to be before 'project()' below
# set(CMAKE_TOOLCHAIN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/compiler.cmake)

# set(OUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../Out)

# #Save the generated libfile in common Out folder
# set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${OUT_PATH}/$<$<CONFIG:DEBUG>:DEBUG>)
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY  ${OUT_PATH}/$<$<CONFIG:DEBUG>:DEBUG>) 

# # Set the project name
# project(TFCMcomm)
# set(EXECUTABLE ${PROJECT_NAME})

# enable_language(C ASM)
# set(CMAKE_C_STANDARD 99)
# set(CMAKE_C_STANDARD_REQUIRED ON)
# set(CMAKE_C_EXTENSIONS OFF)


# # List of source files
# set(SRC_FILES
#         main.cpp
#         )


# # Compile the object file
# add_library(${EXECUTABLE} OBJECT ${SRC_FILES})

# target_compile_definitions(${EXECUTABLE} PRIVATE 
#         $<$<CONFIG:DEBUG>:DEBUG>
#         BUILD_DLL
#         )

# target_compile_options(${EXECUTABLE} PRIVATE 
#         -Wall 
#         -O2
#         )

# # Create the shared library
# add_library(Tfcmcomm SHARED 
#         $<TARGET_OBJECTS:${EXECUTABLE}>
#         )

# # Link the necessary flags for Windows
# #  if (WIN32)
# #      target_link_options(${EXECUTABLE} PRIVATE
# #          -Wl,
# #          -Wl,--output-def
# #          -Wl,--out-implib
# #          -Wl,--dll
# #         #  add_definitions(-D_WIN32_WINNT=0x0601)
# #      )
# # endif()

# # Set additional linker flags
# target_link_options(${EXECUTABLE} PRIVATE -s)



///////////tfcm backup TfcmcommApp



--structure
    |-name[20]
    |-marks
    |-age
--main
    |-structure variable 
    |-temp
    |-tempChar
    |-temp = marks
    |-TempChar = name

how to copy name to tempchar



//
#define LOBYTE(wValue)  ((uint8)(wValue))
#define HIBYTE(wValue)  ((uint8)((wValue)>>8))

