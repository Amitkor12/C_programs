To convert the given code into C code, you would need to make several modifications. C does not support templates or typedefs in the same way as C++, so you'll need to find alternative approaches to achieve the desired functionality. Here's the modified code in C:

```c
typedef struct abc {
    double m_re;
    double m_im;
} abc;

void abc_init(abc *obj, const abc *r) {
    obj->m_re = r->m_re;
    obj->m_im = r->m_im;
}
```

In the modified code:

- The `typedef` for `abc<T>` is replaced with a `struct` definition named `abc`. It contains two double variables, `m_re` and `m_im`, to represent the real and imaginary parts, respectively.
- The constructor in C++ has been replaced with a function `abc_init` that initializes an `abc` object. It takes a pointer to the object to be initialized (`obj`) and a pointer to the object from which to copy the values (`r`).
- Inside the `abc_init` function, the values of `m_re` and `m_im` are copied from the source object (`r`) to the destination object (`obj`).

Here's an example of how you can use the `abc_init` function in C:

```c
int main() {
    abc obj1;
    abc obj2 = {2.5, 1.3};  // Example values for obj2

    abc_init(&obj1, &obj2);  // Initialize obj1 with obj2 values

    // Print the values of obj1
    printf("Real part: %lf\n", obj1.m_re);
    printf("Imaginary part: %lf\n", obj1.m_im);

    return 0;
}
```

Please note that C does not provide automatic memory management like C++, so you need to ensure that you allocate and deallocate memory appropriately for the objects you create.