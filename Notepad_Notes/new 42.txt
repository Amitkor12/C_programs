#include <stdlib.h>

typedef struct {
    int order;
    double* coefficients;
} Cpolynom;

Cpolynom* createCpolynom(int order) {
    Cpolynom* poly = malloc(sizeof(Cpolynom));
    poly->order = order;
    poly->coefficients = malloc((order + 1) * sizeof(double));
    return poly;
}

void destroyCpolynom(Cpolynom* poly) {
    free(poly->coefficients);
    free(poly);
}

void assignCpolynom(Cpolynom* dest, Cpolynom* src) {
    dest->order = src->order;
    for (int i = 0; i <= src->order; i++) {
        dest->coefficients[i] = src->coefficients[i];
    }
}

Cpolynom* Div(Cpolynom* dividend, Cpolynom* divisor, Cpolynom* remainderPolynom) {
    Cpolynom* z = createCpolynom(dividend->order);
    assignCpolynom(z, dividend);
    
    int qOrder = z->order - divisor->order + 1;
    Cpolynom* q = createCpolynom(qOrder);
    
    for (int i = 0; i < qOrder; i++) {
        q->coefficients[i] = z->coefficients[i] / divisor->coefficients[0];
        for (int j = 0; j < divisor->order; j++) {
            if (IsToInvert(qOrder - i, divisor->order - j)) {
                z->coefficients[i + j] += divisor->coefficients[j] * q->coefficients[i];
            } else {
                z->coefficients[i + j] -= divisor->coefficients[j] * q->coefficients[i];
            }
        }
    }
    
    int remOrder = z->order;
    Cpolynom* rem = createCpolynom(remOrder);
    
    for (int i = 0; i < remOrder; i++) {
        rem->coefficients[i] = z->coefficients[z->order - remOrder + i];
    }
    
    assignCpolynom(remainderPolynom, rem);
    
    destroyCpolynom(z);
    destroyCpolynom(rem);
    
    return q;
}
