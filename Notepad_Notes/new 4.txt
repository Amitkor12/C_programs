    double temp;
    int i;

    if ((a == NULL) || (b == NULL) || (quad == NULL) || (err == NULL) || (iter == NULL))
    {
        return;
    }

    c = (double *)malloc((n + 1) * sizeof(double));

    dn = b[n - 1];
    dr = 0;
    ds = 0;
    drn = 0;
    dsn = 0;

    for (i = 0; i < *iter; i++) {
        c[0] = b[0];
        c[1] = b[1] - dn * c[0];

        for (int j = 2; j <= n; j++) {/
            c[j] = b[j] - dn * c[j - 1] - dr * c[j - 2];
        }

        temp = c[n - 1] * c[n - 3] - c[n - 2] * c[n - 2];
        if (temp == 0) {
            *iter = i + 1;
            free(c);
            return;
        }

        drn = (b[n] * c[n - 3] - b[n - 1] * c[n - 2]) / temp;
        dsn = (b[n - 1] * c[n - 1] - b[n] * c[n - 2]) / temp;

        dn += drn;
        dr += drn;
        ds += dsn;

        for (int j = 0; j <= n; j++) {
            b[j] = c[j];
        }
    }

    *err = fabs(b[n]) + fabs(b[n - 1]);

    quad[0] = -ds;
    quad[1] = -dn;

    free(c);
}

void diff_poly(double *a, int n, double *b)
{
    if ((a == NULL) || (b == NULL))
    {
        return;
    }

    for (int i = 1; i < n; i++) {
        b[i - 1] = i * a[i];
    }
}

void recurse(double *a, int n, double *b, int m, double *quad, double *err, int *iter)
{
    double *c;

    if ((a == NULL) || (b == NULL) || (quad == NULL) || (err == NULL) || (iter == NULL))
    {
        return;
    }

    c = (double *)malloc((n + 1) * sizeof(double));

    find_quad(a, n, b, quad, err, iter);

    if (fabs(quad[0]) > 0.01 || fabs(quad[1]) > 0.01) {
        deflate(a, n, b, quad, err);
        recurse(a, n - 2, b, m + 1, quad + 2 * m, err, iter);
        diff_poly(a, n, c);
        deflate(c, n - 1, b, quad, err);
        recurse(c, n - 3, b, m + 1, quad + 2 * m + 2, err, iter);
    }

    free(c);
}

double random(int max)
{
    return (double)rand() / (double)(RAND_MAX / max);
}

bool get_quads(double *a, int n, double *quad, double *x)
{
    double *b, *c, *roots;
    double err, re, im;
    int iter;
    int i;

    if ((a == NULL) || (quad == NULL) || (x == NULL))
    {
        return false;
    }

    b = (double *)malloc((n + 1) * sizeof(double));
    c = (double *)malloc(n * sizeof(double));
    roots = (double *)malloc(2 * (n - 1) * sizeof(double));

    for (i = 0; i <= n; i++) {
        b[i] = a[i];
    }

    recurse(b, n, c, 0, quad, &err, &iter);

    for (i = 0; i < iter; i++) {
        re = -quad[2 * i];
        im = -quad[2 * i + 1];

        if (im == 0) {
            x[i] = re;
        }
        else if (im > 0) {
            x[i] = re + im * I;
            x[i + 1] = re - im * I;
            i++;
        }
        else {
            x[i] = re + im * I;
            x[i + 1] = re - im * I;
            i++;
        }
    }

    for (i = 0; i < iter; i++) {
        re = x[i];
        im = x[i + 1];
        roots[2 * i] = re;
        roots[2 * i + 1] = im;
        printf("Root %d: %.4f + %.4fi\n", i + 1, creal(re), cimag(re));
        printf("Root %d: %.4f + %.4fi\n", i + 1, creal(im), cimag(im));
    }

    free(b);
    free(c);
    free(roots);

    return true;
}

int main()
{
    double a[] = {1, 2, 1};
    int n = sizeof(a) / sizeof(a[0]) - 1;
    double *quad;
    double *x;

    quad = (double *)malloc(2 * n * sizeof(double));
    x = (double *)malloc(n * sizeof(double));

    srand(time(NULL));

    if (get_quads(a, n, quad, x))
    {
        printf("\nQuadratic Factors:\n");
        for (int i = 0; i < n; i++)
        {
            printf("Factor %d: %.4f + %.4fi\n", i + 1, creal(quad[2 * i]), cimag(quad[2 * i]));
            printf("Factor %d: %.4f + %.4fi\n", i + 1, creal(quad[2 * i + 1]), cimag(quad[2 * i + 1]));
        }
    }

    free(quad);
    free(x);

    return 0;
}
